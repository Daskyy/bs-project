type Query {
    # User

    user(id: ID!): UserGQL
    users(criteria: UserCriteriaInput): [UserGQL!]!

    # Voucher

    voucher(id: ID!) : VoucherGQL
    vouchers(criteria: VoucherInputCriteria, page: PaginationInput): [VoucherGQL!]!

    #Event

    trendingEvents(page: PaginationInput): [EventGQL!]
    event(id: ID!): EventGQL
    events(criteria: EventCriteriaInput, page: PaginationInput): [EventGQL!]!

    # Address

    addresses(criteria: AddressCriteriaInput, page: PaginationInput): [AddressGQL!]!
    address(id: ID!): AddressGQL


    # EventLocation

    eventLocations(criteria: EventLocationCriteriaInput): [EventLocationGQL!]!
    eventLocation(id: ID!): EventLocationGQL

}

# Mutations
type Mutation {

  authenticate(username: String!, password: String!): String!

  # Ticket

  purchaseTicket(userId: ID!, eventId: ID!, ticketamount: Int!,paymentmethodId: String!, voucher:String): TicketGQL!
  refundTicket(ticketId: ID!): PaymentGQL!


  # EventLocation

  createEventLocation(input: EventLocationInput):EventLocationGQL!
  deleteEventLocation(id: ID!): EventLocationGQL!
  updateEventLocation(id: ID!, input: EventLocationInput): EventLocationGQL!

  #Address

  createAddress(input: AddressInput): AddressGQL!
  deleteAddress(id: ID!): AddressGQL!
  updateAddress(id:ID!, input: AddressInput): AddressGQL!

  # User

  createUser(input: UserInput): UserGQL!
  deleteUser(id: ID!): UserGQL!
  updateUser(id: ID!, input: UserInput): UserGQL!

  # Event

  createEvent(input: EventInput): EventGQL!
  deleteEvent(id: ID!): EventGQL!
  updateEvent(id: ID!, input: EventInput): EventGQL!
  blockUser(eventId: ID!, userId: ID!): EventGQL!

  # Voucher
  createVoucher(input: VoucherInput!): VoucherGQL!
  deleteVoucher(id: ID!): VoucherGQL!
  updateVoucher(id: ID!, input: VoucherInput): VoucherGQL!
  deactivateVoucher(id: ID!): VoucherGQL!
  activateVoucher(id: ID!): VoucherGQL!
}

# Models
type TicketGQL{
  id: ID!
  event: EventGQL!
  user: UserGQL!
  payment: PaymentGQL!
}

type AddressGQL{
  id: ID!
  street: String!
  no: Int!
  city: String!
  zipCode: Int!
  country: String!
}

type EventGQL {
  id: ID!
  name: String!
  description: String
  startDate: String!
  endDate: String!
  ticketCount: Int!
  ticketsSold: Int!
  maxTicketsPerUser: Int!
  artists: [UserGQL!]!
  location: EventLocationGQL
  blockList: [UserGQL!]  #
  ticketPrice: Int!
}

type EventLocationGQL {
  id: ID!
  address: AddressGQL!
  name: String!
  capacity: Int!
}

type PaymentGQL{
    id: ID!
    paymentMethodId: ID!
    amount: Int!
    status: StatusGQL!
    paymentIntentId: String!
}

type VoucherGQL{
  id: ID!
  code: String!
  discountAmount: Int!
  maxUses: Int!
  remainingUses: Int!
  createdAt: String!
  active: Boolean!
}

enum StatusGQL{
  OPEN
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PermissionGQL{
  STAFF
  ARTIST
  CUSTOMER
}

type UserGQL {
  id: ID!
  name: String!
  email: String!
  password: String!
  permission: PermissionGQL!
}


# Input-Types
input UserInput {
  name: String
  email: String
  password: String
  permission: PermissionGQL
  id: ID
}

input VoucherInputCriteria{
  code: String
  discountAmount: Int
  maxUses: Int
  remainingUses: Int
  active: Boolean
}

input VoucherInput{
  code: String!
  discountAmount: Int!
  maxUses: Int!
}

input AddressCriteriaInput {
    street: String
    city: String
    zipCode: Int
    country: String
}

input EventLocationCriteriaInput {
  addressentity_id: String
  name: String
  capacity: Int
}

input EventInput {
  name: String
  description: String
  startDate: String
  endDate: String
  ticketCount: Int
  ticketsSold: Int
  maxTicketsPerUser: Int
  artists: [ID!]
  location: ID
  blockList: [ID!]
  ticketPrice: Int
}

input EventLocationInput {
  id:ID
  address: ID!
  name: String!
  capacity: Int!
}

input PaginationInput {
  page: Int
  pageSize: Int
}

input AddressInput{
  id:ID
  street: String
  no: Int
  city: String
  zipCode: Int
  country: String
}

input UserCriteriaInput {
  name: String
  email: String
  permissionGQL: PermissionGQL
}

input EventCriteriaInput {
  description: String
  name: String
  location_id: String
  maxticketsperuser: Int
  ticketprice: Int
  ticketcount: Int
  ticketssold: Int
  artists_id: String
  blockList_id: String
}