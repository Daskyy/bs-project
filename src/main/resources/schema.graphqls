

type Query {
  # Beispiel: Liste von Events auslesen
  events(criteria: EventCriteriaInput): [EventGQL!]!
  # Beispiel: Einzelnen User auslesen
  user(id: ID!): UserGQL
    # Beispiel: Einzelnes Event auslesen
  event(id: ID!): EventGQL

}

# Mutations
type Mutation {

  purchaseTicket(userId: ID!, eventId: ID!, ticketamount: Int!,paymentmethodId: String!, voucher:String): TicketGQL!

  #Userf
  # Beispiel: User anlegen
  createUser(input: UserInput): UserGQL!
  # Beispiel: User löschen
  deleteUser(id: ID!): UserGQL!
  # Beispiel: User aktualisieren
  updateUser(id: ID!, input: UserInput): UserGQL!

  #Event
  # Beispiel: Event anlegen
  createEvent(input: EventInput): EventGQL!
  # Beispiel: Event löschen
  deleteEvent(id: ID!): EventGQL!
  # Beispiel: Event aktualisieren
  updateEvent(id: ID!, input: EventInput): EventGQL!
}

# Models
type TicketGQL{
  id: ID!
  event: EventGQL!
  user: UserGQL!
  payment: PaymentGQL!
}

type PaymentGQL{
  paymentMethodId: String!
  amount: Int!
  status: StatusGQL!
  paymentIntentId: String!
  id: ID!
}


type AddressGQL{
  id: ID!
  street: String!
  no: Int!
  city: String!
  zipCode: Int!
  country: String!
}

type EventGQL {
  id: ID!
  name: String!
  description: String
  startDate: String!
  endDate: String!
  ticketCount: Int!   #todo ticketcount und sold in event in domain anpassen
  ticketsSold: Int!  #todo
  maxTicketsPerUser: Int!
  artists: [UserGQL!]!
  location: EventLocationGQL
  blockList: [UserGQL!]  #
  ticketPrice: Int!
  # usw.
}

type EventLocationGQL {
  id: ID!
  address: AddressGQL!
  name: String!
  capacity: Int!
}
#EventCriteria als type nicht notwendig, da es nur für die Query-Methode verwendet wird

type PaymentGQL{
    id: ID!
    paymentMethodId: ID!
    amount: Int!
    status: StatusGQL!
    paymentIntentId: String!
}

enum StatusGQL{
  OPEN
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PermissionGQL{
  STAFF
  ARTIST
  CUSTOMER
}



type UserGQL {
  id: ID!
  name: String!
  email: String!
  password: String!
  permission: PermissionGQL!
}


# Input-Types
input UserInput {
  name: String
  email: String
  password: String
  permission: PermissionGQL
  id: ID
}

input EventInput {
  name: String
  description: String
  startDate: String
  endDate: String
  ticketCount: Int
  ticketsSold: Int
  maxTicketsPerUser: Int
  artists: [UserInput!]!
  location: EventLocationInput
  blockList: [UserInput!]!
  ticketPrice: Int

}

input EventLocationInput {
  address: AddressInput!
  name: String!
  capacity: Int!
}
input AddressInput{
  street: String!
  no: Int!
  city: String!
  zipCode: Int!
  country: String!
}

input EventCriteriaInput {
  # z.B. Filterkriterien
  description: String
  location: EventLocationInput
  name: String
  artists: [UserInput!]
}